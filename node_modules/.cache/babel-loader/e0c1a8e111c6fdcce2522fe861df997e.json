{"ast":null,"code":"var _jsxFileName = \"/Users/victoria.clark/Desktop/Website/familygame/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { InformationCircleIcon, ChartBarIcon, SunIcon, MoonIcon, CakeIcon, AcademicCapIcon } from '@heroicons/react/outline';\nimport { useState, useEffect } from 'react';\nimport { Alert } from './components/alerts/Alert';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { AboutModal } from './components/modals/AboutModal';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { GAME_TITLE, WIN_MESSAGES, GAME_COPIED_MESSAGE, ABOUT_GAME_MESSAGE, NOT_ENOUGH_LETTERS_MESSAGE, WORD_NOT_FOUND_MESSAGE, CORRECT_WORD_MESSAGE } from './constants/strings';\nimport { MAX_WORD_LENGTH, MAX_CHALLENGES, ALERT_TIME_MS, REVEAL_TIME_MS, GAME_LOST_INFO_DELAY } from './constants/settings';\nimport { isWordInWordList, isWinningWord, solution, findFirstUnusedReveal } from './lib/words';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { loadGameStateFromLocalStorage, saveGameStateToLocalStorage } from './lib/localStorage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false);\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false);\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDarkMode ? true : false);\n  const [successAlert, setSuccessAlert] = useState('');\n  const [isRevealing, setIsRevealing] = useState(false);\n  const [guesses, setGuesses] = useState(() => {\n    const loaded = loadGameStateFromLocalStorage();\n\n    if ((loaded === null || loaded === void 0 ? void 0 : loaded.solution) !== solution) {\n      return [];\n    }\n\n    const gameWasWon = loaded.guesses.includes(solution);\n\n    if (gameWasWon) {\n      setIsGameWon(true);\n    }\n\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true);\n    }\n\n    return loaded.guesses;\n  });\n  const [stats, setStats] = useState(() => loadStats());\n  const [isHardMode, setIsHardMode] = useState(localStorage.getItem('gameMode') ? localStorage.getItem('gameMode') === 'hard' : false);\n  const [isMissingPreviousLetters, setIsMissingPreviousLetters] = useState(false);\n  const [missingLetterMessage, setIsMissingLetterMessage] = useState('');\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  const handleDarkMode = isDark => {\n    setIsDarkMode(isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  };\n\n  const handleHardMode = isHard => {\n    setIsHardMode(isHard);\n    localStorage.setItem('gameMode', isHard ? 'hard' : 'normal');\n  };\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({\n      guesses,\n      solution\n    });\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      setTimeout(() => {\n        setSuccessAlert(WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]);\n        setTimeout(() => {\n          setSuccessAlert('');\n          setIsStatsModalOpen(true);\n        }, ALERT_TIME_MS);\n      }, REVEAL_TIME_MS * MAX_WORD_LENGTH);\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true);\n      }, GAME_LOST_INFO_DELAY);\n    }\n  }, [isGameWon, isGameLost]);\n\n  const onChar = value => {\n    if (currentGuess.length < MAX_WORD_LENGTH && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1));\n  };\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(currentGuess.length === MAX_WORD_LENGTH)) {\n      setIsNotEnoughLetters(true);\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false);\n      }, ALERT_TIME_MS);\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true);\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false);\n      }, ALERT_TIME_MS);\n    } // enforce hard mode - all guesses must contain all previously revealed letters\n\n\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses);\n\n      if (firstMissingReveal) {\n        setIsMissingLetterMessage(firstMissingReveal);\n        setIsMissingPreviousLetters(true);\n        return setTimeout(() => {\n          setIsMissingPreviousLetters(false);\n        }, ALERT_TIME_MS);\n      }\n    }\n\n    setIsRevealing(true); // turn this back off after all\n    // chars have been revealed\n\n    setTimeout(() => {\n      setIsRevealing(false);\n    }, REVEAL_TIME_MS * MAX_WORD_LENGTH);\n    const winningWord = isWinningWord(currentGuess);\n\n    if (currentGuess.length === MAX_WORD_LENGTH && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length));\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        setIsGameLost(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pt-2 pb-8 max-w-7xl mx-auto sm:px-6 lg:px-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w-80 mx-auto items-center mb-8 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl ml-2.5 grow font-bold dark:text-white\",\n        children: GAME_TITLE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), isHardMode ? /*#__PURE__*/_jsxDEV(AcademicCapIcon, {\n        className: \"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\",\n        onClick: () => handleHardMode(!isHardMode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(CakeIcon, {\n        className: \"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\",\n        onClick: () => handleHardMode(!isHardMode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), isDarkMode ? /*#__PURE__*/_jsxDEV(SunIcon, {\n        className: \"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\",\n        onClick: () => handleDarkMode(!isDarkMode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MoonIcon, {\n        className: \"h-6 w-6 mr-2 cursor-pointer\",\n        onClick: () => handleDarkMode(!isDarkMode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InformationCircleIcon, {\n        className: \"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\",\n        onClick: () => setIsInfoModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartBarIcon, {\n        className: \"h-6 w-6 mr-3 cursor-pointer dark:stroke-white\",\n        onClick: () => setIsStatsModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      guesses: guesses,\n      currentGuess: currentGuess,\n      isRevealing: isRevealing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      onChar: onChar,\n      onDelete: onDelete,\n      onEnter: onEnter,\n      guesses: guesses,\n      isRevealing: isRevealing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n      isOpen: isInfoModalOpen,\n      handleClose: () => setIsInfoModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsModal, {\n      isOpen: isStatsModalOpen,\n      handleClose: () => setIsStatsModalOpen(false),\n      guesses: guesses,\n      gameStats: stats,\n      isGameLost: isGameLost,\n      isGameWon: isGameWon,\n      handleShare: () => {\n        setSuccessAlert(GAME_COPIED_MESSAGE);\n        return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS);\n      },\n      isHardMode: isHardMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AboutModal, {\n      isOpen: isAboutModalOpen,\n      handleClose: () => setIsAboutModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 select-none\",\n      onClick: () => setIsAboutModalOpen(true),\n      children: ABOUT_GAME_MESSAGE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: NOT_ENOUGH_LETTERS_MESSAGE,\n      isOpen: isNotEnoughLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: WORD_NOT_FOUND_MESSAGE,\n      isOpen: isWordNotFoundAlertOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: missingLetterMessage,\n      isOpen: isMissingPreviousLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: CORRECT_WORD_MESSAGE(solution),\n      isOpen: isGameLost && !isRevealing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: successAlert,\n      isOpen: successAlert !== '',\n      variant: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xzOI9v+TaoYCD3YQg6UtmDJNsYw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/victoria.clark/Desktop/Website/familygame/src/App.tsx"],"names":["InformationCircleIcon","ChartBarIcon","SunIcon","MoonIcon","CakeIcon","AcademicCapIcon","useState","useEffect","Alert","Grid","Keyboard","AboutModal","InfoModal","StatsModal","GAME_TITLE","WIN_MESSAGES","GAME_COPIED_MESSAGE","ABOUT_GAME_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","WORD_NOT_FOUND_MESSAGE","CORRECT_WORD_MESSAGE","MAX_WORD_LENGTH","MAX_CHALLENGES","ALERT_TIME_MS","REVEAL_TIME_MS","GAME_LOST_INFO_DELAY","isWordInWordList","isWinningWord","solution","findFirstUnusedReveal","addStatsForCompletedGame","loadStats","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","App","prefersDarkMode","window","matchMedia","matches","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isAboutModalOpen","setIsAboutModalOpen","isNotEnoughLetters","setIsNotEnoughLetters","isStatsModalOpen","setIsStatsModalOpen","isWordNotFoundAlertOpen","setIsWordNotFoundAlertOpen","isGameLost","setIsGameLost","isDarkMode","setIsDarkMode","localStorage","getItem","successAlert","setSuccessAlert","isRevealing","setIsRevealing","guesses","setGuesses","loaded","gameWasWon","includes","length","stats","setStats","isHardMode","setIsHardMode","isMissingPreviousLetters","setIsMissingPreviousLetters","missingLetterMessage","setIsMissingLetterMessage","document","documentElement","classList","add","remove","handleDarkMode","isDark","setItem","handleHardMode","isHard","setTimeout","Math","floor","random","onChar","value","onDelete","slice","onEnter","firstMissingReveal","winningWord"],"mappings":"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","sourcesContent":["import {\n  InformationCircleIcon,\n  ChartBarIcon,\n  SunIcon,\n  MoonIcon,\n  CakeIcon,\n  AcademicCapIcon,\n} from '@heroicons/react/outline'\nimport { useState, useEffect } from 'react'\nimport { Alert } from './components/alerts/Alert'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { AboutModal } from './components/modals/AboutModal'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport {\n  GAME_TITLE,\n  WIN_MESSAGES,\n  GAME_COPIED_MESSAGE,\n  ABOUT_GAME_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  WORD_NOT_FOUND_MESSAGE,\n  CORRECT_WORD_MESSAGE,\n} from './constants/strings'\nimport {\n  MAX_WORD_LENGTH,\n  MAX_CHALLENGES,\n  ALERT_TIME_MS,\n  REVEAL_TIME_MS,\n  GAME_LOST_INFO_DELAY,\n} from './constants/settings'\nimport {\n  isWordInWordList,\n  isWinningWord,\n  solution,\n  findFirstUnusedReveal,\n} from './lib/words'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n} from './lib/localStorage'\n\nimport './App.css'\n\nfunction App() {\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false)\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false)\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [successAlert, setSuccessAlert] = useState('')\n  const [isRevealing, setIsRevealing] = useState(false)\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    const loaded = loadGameStateFromLocalStorage()\n    if (loaded?.solution !== solution) {\n      return []\n    }\n    const gameWasWon = loaded.guesses.includes(solution)\n    if (gameWasWon) {\n      setIsGameWon(true)\n    }\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true)\n    }\n    return loaded.guesses\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  const [isHardMode, setIsHardMode] = useState(\n    localStorage.getItem('gameMode')\n      ? localStorage.getItem('gameMode') === 'hard'\n      : false\n  )\n\n  const [isMissingPreviousLetters, setIsMissingPreviousLetters] =\n    useState(false)\n  const [missingLetterMessage, setIsMissingLetterMessage] = useState('')\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  }, [isDarkMode])\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n\n  const handleHardMode = (isHard: boolean) => {\n    setIsHardMode(isHard)\n    localStorage.setItem('gameMode', isHard ? 'hard' : 'normal')\n  }\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({ guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      setTimeout(() => {\n        setSuccessAlert(\n          WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n        )\n\n        setTimeout(() => {\n          setSuccessAlert('')\n          setIsStatsModalOpen(true)\n        }, ALERT_TIME_MS)\n      }, REVEAL_TIME_MS * MAX_WORD_LENGTH)\n    }\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, GAME_LOST_INFO_DELAY)\n    }\n  }, [isGameWon, isGameLost])\n\n  const onChar = (value: string) => {\n    if (\n      currentGuess.length < MAX_WORD_LENGTH &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1))\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n    if (!(currentGuess.length === MAX_WORD_LENGTH)) {\n      setIsNotEnoughLetters(true)\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false)\n      }, ALERT_TIME_MS)\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true)\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false)\n      }, ALERT_TIME_MS)\n    }\n\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses)\n      if (firstMissingReveal) {\n        setIsMissingLetterMessage(firstMissingReveal)\n        setIsMissingPreviousLetters(true)\n        return setTimeout(() => {\n          setIsMissingPreviousLetters(false)\n        }, ALERT_TIME_MS)\n      }\n    }\n\n    setIsRevealing(true)\n    // turn this back off after all\n    // chars have been revealed\n    setTimeout(() => {\n      setIsRevealing(false)\n    }, REVEAL_TIME_MS * MAX_WORD_LENGTH)\n\n    const winningWord = isWinningWord(currentGuess)\n\n    if (\n      currentGuess.length === MAX_WORD_LENGTH &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length))\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        setIsGameLost(true)\n      }\n    }\n  }\n\n  return (\n    <div className=\"pt-2 pb-8 max-w-7xl mx-auto sm:px-6 lg:px-8\">\n      <div className=\"flex w-80 mx-auto items-center mb-8 mt-20\">\n        <h1 className=\"text-xl ml-2.5 grow font-bold dark:text-white\">\n          {GAME_TITLE}\n        </h1>\n        {isHardMode ? (\n          <AcademicCapIcon\n            className=\"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\"\n            onClick={() => handleHardMode(!isHardMode)}\n          />\n        ) : (\n          <CakeIcon\n            className=\"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\"\n            onClick={() => handleHardMode(!isHardMode)}\n          />\n        )}\n        {isDarkMode ? (\n          <SunIcon\n            className=\"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\"\n            onClick={() => handleDarkMode(!isDarkMode)}\n          />\n        ) : (\n          <MoonIcon\n            className=\"h-6 w-6 mr-2 cursor-pointer\"\n            onClick={() => handleDarkMode(!isDarkMode)}\n          />\n        )}\n        <InformationCircleIcon\n          className=\"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsInfoModalOpen(true)}\n        />\n        <ChartBarIcon\n          className=\"h-6 w-6 mr-3 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsStatsModalOpen(true)}\n        />\n      </div>\n      <Grid\n        guesses={guesses}\n        currentGuess={currentGuess}\n        isRevealing={isRevealing}\n      />\n      <Keyboard\n        onChar={onChar}\n        onDelete={onDelete}\n        onEnter={onEnter}\n        guesses={guesses}\n        isRevealing={isRevealing}\n      />\n      <InfoModal\n        isOpen={isInfoModalOpen}\n        handleClose={() => setIsInfoModalOpen(false)}\n      />\n      <StatsModal\n        isOpen={isStatsModalOpen}\n        handleClose={() => setIsStatsModalOpen(false)}\n        guesses={guesses}\n        gameStats={stats}\n        isGameLost={isGameLost}\n        isGameWon={isGameWon}\n        handleShare={() => {\n          setSuccessAlert(GAME_COPIED_MESSAGE)\n          return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS)\n        }}\n        isHardMode={isHardMode}\n      />\n      <AboutModal\n        isOpen={isAboutModalOpen}\n        handleClose={() => setIsAboutModalOpen(false)}\n      />\n\n      <button\n        type=\"button\"\n        className=\"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 select-none\"\n        onClick={() => setIsAboutModalOpen(true)}\n      >\n        {ABOUT_GAME_MESSAGE}\n      </button>\n\n      <Alert message={NOT_ENOUGH_LETTERS_MESSAGE} isOpen={isNotEnoughLetters} />\n      <Alert\n        message={WORD_NOT_FOUND_MESSAGE}\n        isOpen={isWordNotFoundAlertOpen}\n      />\n      <Alert message={missingLetterMessage} isOpen={isMissingPreviousLetters} />\n      <Alert\n        message={CORRECT_WORD_MESSAGE(solution)}\n        isOpen={isGameLost && !isRevealing}\n      />\n      <Alert\n        message={successAlert}\n        isOpen={successAlert !== ''}\n        variant=\"success\"\n      />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}