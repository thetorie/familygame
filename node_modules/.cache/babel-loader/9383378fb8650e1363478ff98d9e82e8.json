{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/victoria.clark/Desktop/Website/familygame/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{WORDS}from'../constants/wordlist';import{VALID_GUESSES}from'../constants/validGuesses';import{getGuessStatuses}from'./statuses';export var isWordInWordList=function isWordInWordList(word){return WORDS.includes(word.toLowerCase())||VALID_GUESSES.includes(word.toLowerCase());};export var isWinningWord=function isWinningWord(word){return solution===word;};// build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\nexport var findFirstUnusedReveal=function findFirstUnusedReveal(word,guesses){var knownLetterSet=new Set();var _iterator=_createForOfIteratorHelper(guesses),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var guess=_step.value;var statuses=getGuessStatuses(guess);for(var i=0;i<guess.length;i++){if(statuses[i]==='correct'||statuses[i]==='present'){knownLetterSet.add(guess[i]);}if(statuses[i]==='correct'&&word[i]!==guess[i]){return\"Must use \".concat(guess[i],\" in position \").concat(i+1);}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}for(var _i=0,_Array$from=Array.from(knownLetterSet.values());_i<_Array$from.length;_i++){var letter=_Array$from[_i];// fail fast, always return first failed letter if applicable\nif(!word.includes(letter)){return\"Guess must contain \".concat(letter);}}return false;};export var getWordOfDay=function getWordOfDay(){// January 1, 2022 Game Epoch\nvar epochMs=new Date('January 1, 2022 00:00:00').valueOf();var now=Date.now();var msInDay=86400000;var index=Math.floor((now-epochMs)/msInDay);var nextday=(index+1)*msInDay+epochMs;return{solution:WORDS[index%WORDS.length].toUpperCase(),solutionIndex:index,tomorrow:nextday};};var _getWordOfDay=getWordOfDay(),solution=_getWordOfDay.solution,solutionIndex=_getWordOfDay.solutionIndex,tomorrow=_getWordOfDay.tomorrow;export{solution,solutionIndex,tomorrow};","map":{"version":3,"sources":["/Users/victoria.clark/Desktop/Website/familygame/src/lib/words.ts"],"names":["WORDS","VALID_GUESSES","getGuessStatuses","isWordInWordList","word","includes","toLowerCase","isWinningWord","solution","findFirstUnusedReveal","guesses","knownLetterSet","Set","guess","statuses","i","length","add","Array","from","values","letter","getWordOfDay","epochMs","Date","valueOf","now","msInDay","index","Math","floor","nextday","toUpperCase","solutionIndex","tomorrow"],"mappings":"8JAAA,OAASA,KAAT,KAAsB,uBAAtB,CACA,OAASC,aAAT,KAA8B,2BAA9B,CACA,OAASC,gBAAT,KAAiC,YAAjC,CAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,IAAD,CAAkB,CAChD,MACEJ,CAAAA,KAAK,CAACK,QAAN,CAAeD,IAAI,CAACE,WAAL,EAAf,GACAL,aAAa,CAACI,QAAd,CAAuBD,IAAI,CAACE,WAAL,EAAvB,CAFF,CAID,CALM,CAOP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACH,IAAD,CAAkB,CAC7C,MAAOI,CAAAA,QAAQ,GAAKJ,IAApB,CACD,CAFM,CAIP;AACA;AACA,MAAO,IAAMK,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACL,IAAD,CAAeM,OAAf,CAAqC,CACxE,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAAJ,EAAvB,CADwE,yCAEpDF,OAFoD,YAExE,+CAA6B,IAAlBG,CAAAA,KAAkB,aAC3B,GAAMC,CAAAA,QAAQ,CAAGZ,gBAAgB,CAACW,KAAD,CAAjC,CAEA,IAAK,GAAIE,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,KAAK,CAACG,MAA1B,CAAkCD,CAAC,EAAnC,CAAuC,CACrC,GAAID,QAAQ,CAACC,CAAD,CAAR,GAAgB,SAAhB,EAA6BD,QAAQ,CAACC,CAAD,CAAR,GAAgB,SAAjD,CAA4D,CAC1DJ,cAAc,CAACM,GAAf,CAAmBJ,KAAK,CAACE,CAAD,CAAxB,EACD,CACD,GAAID,QAAQ,CAACC,CAAD,CAAR,GAAgB,SAAhB,EAA6BX,IAAI,CAACW,CAAD,CAAJ,GAAYF,KAAK,CAACE,CAAD,CAAlD,CAAuD,CACrD,yBAAmBF,KAAK,CAACE,CAAD,CAAxB,yBAA2CA,CAAC,CAAG,CAA/C,EACD,CACF,CACF,CAbuE,qDAexE,yBAAqBG,KAAK,CAACC,IAAN,CAAWR,cAAc,CAACS,MAAf,EAAX,CAArB,4BAA0D,CAArD,GAAMC,CAAAA,MAAM,gBAAZ,CACH;AACA,GAAI,CAACjB,IAAI,CAACC,QAAL,CAAcgB,MAAd,CAAL,CAA4B,CAC1B,mCAA6BA,MAA7B,EACD,CACF,CACD,MAAO,MAAP,CACD,CAtBM,CAwBP,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAChC;AACA,GAAMC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,IAAJ,CAAS,0BAAT,EAAqCC,OAArC,EAAhB,CACA,GAAMC,CAAAA,GAAG,CAAGF,IAAI,CAACE,GAAL,EAAZ,CACA,GAAMC,CAAAA,OAAO,CAAG,QAAhB,CACA,GAAMC,CAAAA,KAAK,CAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,GAAG,CAAGH,OAAP,EAAkBI,OAA7B,CAAd,CACA,GAAMI,CAAAA,OAAO,CAAG,CAACH,KAAK,CAAG,CAAT,EAAcD,OAAd,CAAwBJ,OAAxC,CAEA,MAAO,CACLf,QAAQ,CAAER,KAAK,CAAC4B,KAAK,CAAG5B,KAAK,CAACgB,MAAf,CAAL,CAA4BgB,WAA5B,EADL,CAELC,aAAa,CAAEL,KAFV,CAGLM,QAAQ,CAAEH,OAHL,CAAP,CAKD,CAbM,CAeA,kBAA8CT,YAAY,EAA1D,CAAQd,QAAR,eAAQA,QAAR,CAAkByB,aAAlB,eAAkBA,aAAlB,CAAiCC,QAAjC,eAAiCA,QAAjC,C","sourcesContent":["import { WORDS } from '../constants/wordlist'\nimport { VALID_GUESSES } from '../constants/validGuesses'\nimport { getGuessStatuses } from './statuses'\n\nexport const isWordInWordList = (word: string) => {\n  return (\n    WORDS.includes(word.toLowerCase()) ||\n    VALID_GUESSES.includes(word.toLowerCase())\n  )\n}\n\nexport const isWinningWord = (word: string) => {\n  return solution === word\n}\n\n// build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\nexport const findFirstUnusedReveal = (word: string, guesses: string[]) => {\n  const knownLetterSet = new Set<string>()\n  for (const guess of guesses) {\n    const statuses = getGuessStatuses(guess)\n\n    for (let i = 0; i < guess.length; i++) {\n      if (statuses[i] === 'correct' || statuses[i] === 'present') {\n        knownLetterSet.add(guess[i])\n      }\n      if (statuses[i] === 'correct' && word[i] !== guess[i]) {\n        return `Must use ${guess[i]} in position ${i + 1}`\n      }\n    }\n  }\n\n  for (const letter of Array.from(knownLetterSet.values())) {\n    // fail fast, always return first failed letter if applicable\n    if (!word.includes(letter)) {\n      return `Guess must contain ${letter}`\n    }\n  }\n  return false\n}\n\nexport const getWordOfDay = () => {\n  // January 1, 2022 Game Epoch\n  const epochMs = new Date('January 1, 2022 00:00:00').valueOf()\n  const now = Date.now()\n  const msInDay = 86400000\n  const index = Math.floor((now - epochMs) / msInDay)\n  const nextday = (index + 1) * msInDay + epochMs\n\n  return {\n    solution: WORDS[index % WORDS.length].toUpperCase(),\n    solutionIndex: index,\n    tomorrow: nextday,\n  }\n}\n\nexport const { solution, solutionIndex, tomorrow } = getWordOfDay()\n"]},"metadata":{},"sourceType":"module"}