{"ast":null,"code":"import{MAX_CHALLENGES}from'../../constants/settings';import{CompletedRow}from'./CompletedRow';import{CurrentRow}from'./CurrentRow';import{EmptyRow}from'./EmptyRow';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Grid=function Grid(_ref){var guesses=_ref.guesses,currentGuess=_ref.currentGuess,isRevealing=_ref.isRevealing;var empties=guesses.length<MAX_CHALLENGES-1?Array.from(Array(MAX_CHALLENGES-1-guesses.length)):[];return/*#__PURE__*/_jsxs(\"div\",{className:\"pb-6\",children:[guesses.map(function(guess,i){return/*#__PURE__*/_jsx(CompletedRow,{guess:guess,isRevealing:isRevealing&&guesses.length-1===i},i);}),guesses.length<MAX_CHALLENGES&&/*#__PURE__*/_jsx(CurrentRow,{guess:currentGuess}),empties.map(function(_,i){return/*#__PURE__*/_jsx(EmptyRow,{},i);})]});};","map":{"version":3,"sources":["/Users/victoria.clark/Desktop/Website/familygame/src/components/grid/Grid.tsx"],"names":["MAX_CHALLENGES","CompletedRow","CurrentRow","EmptyRow","Grid","guesses","currentGuess","isRevealing","empties","length","Array","from","map","guess","i","_"],"mappings":"AAAA,OAASA,cAAT,KAA+B,0BAA/B,CACA,OAASC,YAAT,KAA6B,gBAA7B,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,OAASC,QAAT,KAAyB,YAAzB,C,wFAQA,MAAO,IAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAAmD,IAAhDC,CAAAA,OAAgD,MAAhDA,OAAgD,CAAvCC,YAAuC,MAAvCA,YAAuC,CAAzBC,WAAyB,MAAzBA,WAAyB,CACrE,GAAMC,CAAAA,OAAO,CACXH,OAAO,CAACI,MAAR,CAAiBT,cAAc,CAAG,CAAlC,CACIU,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACV,cAAc,CAAG,CAAjB,CAAqBK,OAAO,CAACI,MAA9B,CAAhB,CADJ,CAEI,EAHN,CAKA,mBACE,aAAK,SAAS,CAAC,MAAf,WACGJ,OAAO,CAACO,GAAR,CAAY,SAACC,KAAD,CAAQC,CAAR,qBACX,KAAC,YAAD,EAEE,KAAK,CAAED,KAFT,CAGE,WAAW,CAAEN,WAAW,EAAIF,OAAO,CAACI,MAAR,CAAiB,CAAjB,GAAuBK,CAHrD,EACOA,CADP,CADW,EAAZ,CADH,CAQGT,OAAO,CAACI,MAAR,CAAiBT,cAAjB,eAAmC,KAAC,UAAD,EAAY,KAAK,CAAEM,YAAnB,EARtC,CASGE,OAAO,CAACI,GAAR,CAAY,SAACG,CAAD,CAAID,CAAJ,qBACX,KAAC,QAAD,IAAeA,CAAf,CADW,EAAZ,CATH,GADF,CAeD,CArBM","sourcesContent":["import { MAX_CHALLENGES } from '../../constants/settings'\nimport { CompletedRow } from './CompletedRow'\nimport { CurrentRow } from './CurrentRow'\nimport { EmptyRow } from './EmptyRow'\n\ntype Props = {\n  guesses: string[]\n  currentGuess: string\n  isRevealing?: boolean\n}\n\nexport const Grid = ({ guesses, currentGuess, isRevealing }: Props) => {\n  const empties =\n    guesses.length < MAX_CHALLENGES - 1\n      ? Array.from(Array(MAX_CHALLENGES - 1 - guesses.length))\n      : []\n\n  return (\n    <div className=\"pb-6\">\n      {guesses.map((guess, i) => (\n        <CompletedRow\n          key={i}\n          guess={guess}\n          isRevealing={isRevealing && guesses.length - 1 === i}\n        />\n      ))}\n      {guesses.length < MAX_CHALLENGES && <CurrentRow guess={currentGuess} />}\n      {empties.map((_, i) => (\n        <EmptyRow key={i} />\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}