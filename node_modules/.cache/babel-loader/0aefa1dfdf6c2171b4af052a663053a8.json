{"ast":null,"code":"import{solution}from'./words';export var getStatuses=function getStatuses(guesses){var charObj={};guesses.forEach(function(word){word.split('').forEach(function(letter,i){if(!solution.includes(letter)){// make status absent\nreturn charObj[letter]='absent';}if(letter===solution[i]){//make status correct\nreturn charObj[letter]='correct';}if(charObj[letter]!=='correct'){//make status present\nreturn charObj[letter]='present';}});});return charObj;};export var getGuessStatuses=function getGuessStatuses(guess){var splitSolution=solution.split('');var splitGuess=guess.split('');var solutionCharsTaken=splitSolution.map(function(_){return false;});var statuses=Array.from(Array(guess.length));// handle all correct cases first\nsplitGuess.forEach(function(letter,i){if(letter===splitSolution[i]){statuses[i]='correct';solutionCharsTaken[i]=true;return;}});splitGuess.forEach(function(letter,i){if(statuses[i])return;if(!splitSolution.includes(letter)){// handles the absent case\nstatuses[i]='absent';return;}// now we are left with \"present\"s\nvar indexOfPresentChar=splitSolution.findIndex(function(x,index){return x===letter&&!solutionCharsTaken[index];});if(indexOfPresentChar>-1){statuses[i]='present';solutionCharsTaken[indexOfPresentChar]=true;return;}else{statuses[i]='absent';return;}});return statuses;};","map":{"version":3,"sources":["/Users/victoria.clark/Desktop/Website/familygame/src/lib/statuses.ts"],"names":["solution","getStatuses","guesses","charObj","forEach","word","split","letter","i","includes","getGuessStatuses","guess","splitSolution","splitGuess","solutionCharsTaken","map","_","statuses","Array","from","length","indexOfPresentChar","findIndex","x","index"],"mappings":"AAAA,OAASA,QAAT,KAAyB,SAAzB,CAIA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CACzBC,OADyB,CAES,CAClC,GAAMC,CAAAA,OAAsC,CAAG,EAA/C,CAEAD,OAAO,CAACE,OAAR,CAAgB,SAACC,IAAD,CAAU,CACxBA,IAAI,CAACC,KAAL,CAAW,EAAX,EAAeF,OAAf,CAAuB,SAACG,MAAD,CAASC,CAAT,CAAe,CACpC,GAAI,CAACR,QAAQ,CAACS,QAAT,CAAkBF,MAAlB,CAAL,CAAgC,CAC9B;AACA,MAAQJ,CAAAA,OAAO,CAACI,MAAD,CAAP,CAAkB,QAA1B,CACD,CAED,GAAIA,MAAM,GAAKP,QAAQ,CAACQ,CAAD,CAAvB,CAA4B,CAC1B;AACA,MAAQL,CAAAA,OAAO,CAACI,MAAD,CAAP,CAAkB,SAA1B,CACD,CAED,GAAIJ,OAAO,CAACI,MAAD,CAAP,GAAoB,SAAxB,CAAmC,CACjC;AACA,MAAQJ,CAAAA,OAAO,CAACI,MAAD,CAAP,CAAkB,SAA1B,CACD,CACF,CAfD,EAgBD,CAjBD,EAmBA,MAAOJ,CAAAA,OAAP,CACD,CAzBM,CA2BP,MAAO,IAAMO,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAiC,CAC/D,GAAMC,CAAAA,aAAa,CAAGZ,QAAQ,CAACM,KAAT,CAAe,EAAf,CAAtB,CACA,GAAMO,CAAAA,UAAU,CAAGF,KAAK,CAACL,KAAN,CAAY,EAAZ,CAAnB,CAEA,GAAMQ,CAAAA,kBAAkB,CAAGF,aAAa,CAACG,GAAd,CAAkB,SAACC,CAAD,QAAO,MAAP,EAAlB,CAA3B,CAEA,GAAMC,CAAAA,QAAsB,CAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACP,KAAK,CAACS,MAAP,CAAhB,CAA/B,CAEA;AACAP,UAAU,CAACT,OAAX,CAAmB,SAACG,MAAD,CAASC,CAAT,CAAe,CAChC,GAAID,MAAM,GAAKK,aAAa,CAACJ,CAAD,CAA5B,CAAiC,CAC/BS,QAAQ,CAACT,CAAD,CAAR,CAAc,SAAd,CACAM,kBAAkB,CAACN,CAAD,CAAlB,CAAwB,IAAxB,CACA,OACD,CACF,CAND,EAQAK,UAAU,CAACT,OAAX,CAAmB,SAACG,MAAD,CAASC,CAAT,CAAe,CAChC,GAAIS,QAAQ,CAACT,CAAD,CAAZ,CAAiB,OAEjB,GAAI,CAACI,aAAa,CAACH,QAAd,CAAuBF,MAAvB,CAAL,CAAqC,CACnC;AACAU,QAAQ,CAACT,CAAD,CAAR,CAAc,QAAd,CACA,OACD,CAED;AACA,GAAMa,CAAAA,kBAAkB,CAAGT,aAAa,CAACU,SAAd,CACzB,SAACC,CAAD,CAAIC,KAAJ,QAAcD,CAAAA,CAAC,GAAKhB,MAAN,EAAgB,CAACO,kBAAkB,CAACU,KAAD,CAAjD,EADyB,CAA3B,CAIA,GAAIH,kBAAkB,CAAG,CAAC,CAA1B,CAA6B,CAC3BJ,QAAQ,CAACT,CAAD,CAAR,CAAc,SAAd,CACAM,kBAAkB,CAACO,kBAAD,CAAlB,CAAyC,IAAzC,CACA,OACD,CAJD,IAIO,CACLJ,QAAQ,CAACT,CAAD,CAAR,CAAc,QAAd,CACA,OACD,CACF,CAtBD,EAwBA,MAAOS,CAAAA,QAAP,CACD,CA1CM","sourcesContent":["import { solution } from './words'\n\nexport type CharStatus = 'absent' | 'present' | 'correct'\n\nexport const getStatuses = (\n  guesses: string[]\n): { [key: string]: CharStatus } => {\n  const charObj: { [key: string]: CharStatus } = {}\n\n  guesses.forEach((word) => {\n    word.split('').forEach((letter, i) => {\n      if (!solution.includes(letter)) {\n        // make status absent\n        return (charObj[letter] = 'absent')\n      }\n\n      if (letter === solution[i]) {\n        //make status correct\n        return (charObj[letter] = 'correct')\n      }\n\n      if (charObj[letter] !== 'correct') {\n        //make status present\n        return (charObj[letter] = 'present')\n      }\n    })\n  })\n\n  return charObj\n}\n\nexport const getGuessStatuses = (guess: string): CharStatus[] => {\n  const splitSolution = solution.split('')\n  const splitGuess = guess.split('')\n\n  const solutionCharsTaken = splitSolution.map((_) => false)\n\n  const statuses: CharStatus[] = Array.from(Array(guess.length))\n\n  // handle all correct cases first\n  splitGuess.forEach((letter, i) => {\n    if (letter === splitSolution[i]) {\n      statuses[i] = 'correct'\n      solutionCharsTaken[i] = true\n      return\n    }\n  })\n\n  splitGuess.forEach((letter, i) => {\n    if (statuses[i]) return\n\n    if (!splitSolution.includes(letter)) {\n      // handles the absent case\n      statuses[i] = 'absent'\n      return\n    }\n\n    // now we are left with \"present\"s\n    const indexOfPresentChar = splitSolution.findIndex(\n      (x, index) => x === letter && !solutionCharsTaken[index]\n    )\n\n    if (indexOfPresentChar > -1) {\n      statuses[i] = 'present'\n      solutionCharsTaken[indexOfPresentChar] = true\n      return\n    } else {\n      statuses[i] = 'absent'\n      return\n    }\n  })\n\n  return statuses\n}\n"]},"metadata":{},"sourceType":"module"}